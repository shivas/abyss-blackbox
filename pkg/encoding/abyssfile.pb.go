// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: abyssfile.proto

package encoding

import (
	combatlog "github.com/shivas/abyss-blackbox/pkg/combatlog"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AbyssRecording_AbyssShipType int32

const (
	AbyssRecording_UNKNOWN_SHIP AbyssRecording_AbyssShipType = 0
	AbyssRecording_CRUISER      AbyssRecording_AbyssShipType = 1
	AbyssRecording_DESTROYER    AbyssRecording_AbyssShipType = 2
	AbyssRecording_FRIGATE      AbyssRecording_AbyssShipType = 3
)

// Enum value maps for AbyssRecording_AbyssShipType.
var (
	AbyssRecording_AbyssShipType_name = map[int32]string{
		0: "UNKNOWN_SHIP",
		1: "CRUISER",
		2: "DESTROYER",
		3: "FRIGATE",
	}
	AbyssRecording_AbyssShipType_value = map[string]int32{
		"UNKNOWN_SHIP": 0,
		"CRUISER":      1,
		"DESTROYER":    2,
		"FRIGATE":      3,
	}
)

func (x AbyssRecording_AbyssShipType) Enum() *AbyssRecording_AbyssShipType {
	p := new(AbyssRecording_AbyssShipType)
	*p = x
	return p
}

func (x AbyssRecording_AbyssShipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbyssRecording_AbyssShipType) Descriptor() protoreflect.EnumDescriptor {
	return file_abyssfile_proto_enumTypes[0].Descriptor()
}

func (AbyssRecording_AbyssShipType) Type() protoreflect.EnumType {
	return &file_abyssfile_proto_enumTypes[0]
}

func (x AbyssRecording_AbyssShipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbyssRecording_AbyssShipType.Descriptor instead.
func (AbyssRecording_AbyssShipType) EnumDescriptor() ([]byte, []int) {
	return file_abyssfile_proto_rawDescGZIP(), []int{0, 0}
}

type AbyssRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overview                []byte                       `protobuf:"bytes,1,opt,name=overview,proto3" json:"overview,omitempty"`
	Loot                    []*LootRecord                `protobuf:"bytes,2,rep,name=loot,proto3" json:"loot,omitempty"`
	CombatLog               []*combatlog.CombatLogRecord `protobuf:"bytes,3,rep,name=combat_log,json=combatLog,proto3" json:"combat_log,omitempty"`
	TestServer              bool                         `protobuf:"varint,4,opt,name=test_server,json=testServer,proto3" json:"test_server,omitempty"`
	WeatherStrength         int32                        `protobuf:"varint,5,opt,name=weather_strength,json=weatherStrength,proto3" json:"weather_strength,omitempty"`
	LootRecordDiscriminator string                       `protobuf:"bytes,6,opt,name=loot_record_discriminator,json=lootRecordDiscriminator,proto3" json:"loot_record_discriminator,omitempty"`
	ManualAbyssTypeOverride bool                         `protobuf:"varint,7,opt,name=manual_abyss_type_override,json=manualAbyssTypeOverride,proto3" json:"manual_abyss_type_override,omitempty"`
	AbyssShipType           AbyssRecording_AbyssShipType `protobuf:"varint,8,opt,name=abyss_ship_type,json=abyssShipType,proto3,enum=protobuf.AbyssRecording_AbyssShipType" json:"abyss_ship_type,omitempty"`
	AbyssWheather           string                       `protobuf:"bytes,9,opt,name=abyss_wheather,json=abyssWheather,proto3" json:"abyss_wheather,omitempty"`
	AbyssTier               int32                        `protobuf:"varint,10,opt,name=abyss_tier,json=abyssTier,proto3" json:"abyss_tier,omitempty"`
	Fittings                map[string]*Fit              `protobuf:"bytes,11,rep,name=fittings,proto3" json:"fittings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RecorderVersion         string                       `protobuf:"bytes,99,opt,name=recorder_version,json=recorderVersion,proto3" json:"recorder_version,omitempty"`
}

func (x *AbyssRecording) Reset() {
	*x = AbyssRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abyssfile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbyssRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbyssRecording) ProtoMessage() {}

func (x *AbyssRecording) ProtoReflect() protoreflect.Message {
	mi := &file_abyssfile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbyssRecording.ProtoReflect.Descriptor instead.
func (*AbyssRecording) Descriptor() ([]byte, []int) {
	return file_abyssfile_proto_rawDescGZIP(), []int{0}
}

func (x *AbyssRecording) GetOverview() []byte {
	if x != nil {
		return x.Overview
	}
	return nil
}

func (x *AbyssRecording) GetLoot() []*LootRecord {
	if x != nil {
		return x.Loot
	}
	return nil
}

func (x *AbyssRecording) GetCombatLog() []*combatlog.CombatLogRecord {
	if x != nil {
		return x.CombatLog
	}
	return nil
}

func (x *AbyssRecording) GetTestServer() bool {
	if x != nil {
		return x.TestServer
	}
	return false
}

func (x *AbyssRecording) GetWeatherStrength() int32 {
	if x != nil {
		return x.WeatherStrength
	}
	return 0
}

func (x *AbyssRecording) GetLootRecordDiscriminator() string {
	if x != nil {
		return x.LootRecordDiscriminator
	}
	return ""
}

func (x *AbyssRecording) GetManualAbyssTypeOverride() bool {
	if x != nil {
		return x.ManualAbyssTypeOverride
	}
	return false
}

func (x *AbyssRecording) GetAbyssShipType() AbyssRecording_AbyssShipType {
	if x != nil {
		return x.AbyssShipType
	}
	return AbyssRecording_UNKNOWN_SHIP
}

func (x *AbyssRecording) GetAbyssWheather() string {
	if x != nil {
		return x.AbyssWheather
	}
	return ""
}

func (x *AbyssRecording) GetAbyssTier() int32 {
	if x != nil {
		return x.AbyssTier
	}
	return 0
}

func (x *AbyssRecording) GetFittings() map[string]*Fit {
	if x != nil {
		return x.Fittings
	}
	return nil
}

func (x *AbyssRecording) GetRecorderVersion() string {
	if x != nil {
		return x.RecorderVersion
	}
	return ""
}

type LootRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame int32  `protobuf:"varint,1,opt,name=frame,proto3" json:"frame,omitempty"`
	Loot  string `protobuf:"bytes,2,opt,name=loot,proto3" json:"loot,omitempty"`
}

func (x *LootRecord) Reset() {
	*x = LootRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abyssfile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LootRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LootRecord) ProtoMessage() {}

func (x *LootRecord) ProtoReflect() protoreflect.Message {
	mi := &file_abyssfile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LootRecord.ProtoReflect.Descriptor instead.
func (*LootRecord) Descriptor() ([]byte, []int) {
	return file_abyssfile_proto_rawDescGZIP(), []int{1}
}

func (x *LootRecord) GetFrame() int32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *LootRecord) GetLoot() string {
	if x != nil {
		return x.Loot
	}
	return ""
}

type Fit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ForeignID   *string `protobuf:"bytes,2,opt,name=foreignID,proto3,oneof" json:"foreignID,omitempty"`
	FittingName string  `protobuf:"bytes,3,opt,name=fittingName,proto3" json:"fittingName,omitempty"`
	EFT         string  `protobuf:"bytes,4,opt,name=EFT,proto3" json:"EFT,omitempty"`
	FFH         string  `protobuf:"bytes,5,opt,name=FFH,proto3" json:"FFH,omitempty"`
	Price       float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	ShipName    string  `protobuf:"bytes,7,opt,name=shipName,proto3" json:"shipName,omitempty"`
	ShipTypeID  int32   `protobuf:"varint,8,opt,name=shipTypeID,proto3" json:"shipTypeID,omitempty"`
}

func (x *Fit) Reset() {
	*x = Fit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abyssfile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fit) ProtoMessage() {}

func (x *Fit) ProtoReflect() protoreflect.Message {
	mi := &file_abyssfile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fit.ProtoReflect.Descriptor instead.
func (*Fit) Descriptor() ([]byte, []int) {
	return file_abyssfile_proto_rawDescGZIP(), []int{2}
}

func (x *Fit) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Fit) GetForeignID() string {
	if x != nil && x.ForeignID != nil {
		return *x.ForeignID
	}
	return ""
}

func (x *Fit) GetFittingName() string {
	if x != nil {
		return x.FittingName
	}
	return ""
}

func (x *Fit) GetEFT() string {
	if x != nil {
		return x.EFT
	}
	return ""
}

func (x *Fit) GetFFH() string {
	if x != nil {
		return x.FFH
	}
	return ""
}

func (x *Fit) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Fit) GetShipName() string {
	if x != nil {
		return x.ShipName
	}
	return ""
}

func (x *Fit) GetShipTypeID() int32 {
	if x != nil {
		return x.ShipTypeID
	}
	return 0
}

var File_abyssfile_proto protoreflect.FileDescriptor

var file_abyssfile_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x62, 0x79, 0x73, 0x73, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x0f, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x05, 0x0a,
	0x0e, 0x41, 0x62, 0x79, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x04, 0x6c,
	0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x04, 0x6c, 0x6f, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x19,
	0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6c, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x62, 0x79, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x62, 0x79, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x62, 0x79, 0x73, 0x73, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x62, 0x79, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x79, 0x73, 0x73, 0x53, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x62, 0x79, 0x73, 0x73, 0x53, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x79, 0x73, 0x73, 0x5f, 0x77,
	0x68, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x62, 0x79, 0x73, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x79, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x62, 0x79, 0x73, 0x73, 0x54, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x66,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x62, 0x79, 0x73, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4a, 0x0a, 0x0d, 0x46, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0d, 0x41, 0x62, 0x79, 0x73, 0x73, 0x53,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x55,
	0x49, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x49, 0x47, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x22, 0x36, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x03, 0x46,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x46, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x46,
	0x54, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x46, 0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x46, 0x46, 0x48, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x49, 0x44, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x68, 0x69, 0x76, 0x61, 0x73, 0x2f, 0x61, 0x62, 0x79, 0x73, 0x73, 0x2d, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_abyssfile_proto_rawDescOnce sync.Once
	file_abyssfile_proto_rawDescData = file_abyssfile_proto_rawDesc
)

func file_abyssfile_proto_rawDescGZIP() []byte {
	file_abyssfile_proto_rawDescOnce.Do(func() {
		file_abyssfile_proto_rawDescData = protoimpl.X.CompressGZIP(file_abyssfile_proto_rawDescData)
	})
	return file_abyssfile_proto_rawDescData
}

var file_abyssfile_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_abyssfile_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_abyssfile_proto_goTypes = []interface{}{
	(AbyssRecording_AbyssShipType)(0), // 0: protobuf.AbyssRecording.AbyssShipType
	(*AbyssRecording)(nil),            // 1: protobuf.AbyssRecording
	(*LootRecord)(nil),                // 2: protobuf.LootRecord
	(*Fit)(nil),                       // 3: protobuf.Fit
	nil,                               // 4: protobuf.AbyssRecording.FittingsEntry
	(*combatlog.CombatLogRecord)(nil), // 5: combatlog.CombatLogRecord
}
var file_abyssfile_proto_depIdxs = []int32{
	2, // 0: protobuf.AbyssRecording.loot:type_name -> protobuf.LootRecord
	5, // 1: protobuf.AbyssRecording.combat_log:type_name -> combatlog.CombatLogRecord
	0, // 2: protobuf.AbyssRecording.abyss_ship_type:type_name -> protobuf.AbyssRecording.AbyssShipType
	4, // 3: protobuf.AbyssRecording.fittings:type_name -> protobuf.AbyssRecording.FittingsEntry
	3, // 4: protobuf.AbyssRecording.FittingsEntry.value:type_name -> protobuf.Fit
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_abyssfile_proto_init() }
func file_abyssfile_proto_init() {
	if File_abyssfile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_abyssfile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbyssRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abyssfile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LootRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abyssfile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_abyssfile_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abyssfile_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_abyssfile_proto_goTypes,
		DependencyIndexes: file_abyssfile_proto_depIdxs,
		EnumInfos:         file_abyssfile_proto_enumTypes,
		MessageInfos:      file_abyssfile_proto_msgTypes,
	}.Build()
	File_abyssfile_proto = out.File
	file_abyssfile_proto_rawDesc = nil
	file_abyssfile_proto_goTypes = nil
	file_abyssfile_proto_depIdxs = nil
}
